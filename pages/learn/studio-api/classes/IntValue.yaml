name: IntValue
type: classes
summary: |
  The IntValue class is used to store a single integer value. It is a subclass of the Class.Value and it is recommended to check out that documentation before conitnuing on. This class is useful for tracking a single integer value that all clients should be synchronized on.
description:
code_samples: |
  #### Shared Score
  description: Imagine a score for a room where everyone works together increase the room's score. The onScorePoint event is triggered when a player scores a point and the score is increased by 1 on the server, which then triggers the Changed event on the score IntValue for all of the clients.
  ```lua
    local score : IntValue = IntValue.new("SynchronizedScore", 0)
    local onScoredPoint : Event = Event.new("OnScoredPoint")

    -- not local so that another script can find this one and call this function
    function ScorePoint()
      onScoredPoint:FireServer()
    end

    local function Client()
      score.Changed:Connect(function()
          print("The score is now " .. score.value)
      end)
    end

    local function Server()
      onScoredPoint:Connect(function()
          score.value = score.value + 1
      end)
    end

    if server then
      Server()
    else
      Client()
    end
  ```
inherits:
tags:
  - ServerAndClient
constructors:
  - name: new
    summary:
    description:
    is_static: true
    tags:
      - ServerAndClient
    code_samples:
    parameters:
      - name: name
        type: string
        default:
        summary: The name of the IntValue. This must be unique as it is used as the key to synchronize the value across all clients.
      - name: initialValue
        type: number
        default:
        summary: The initial value of the IntValue.
    returns:
      - type: DataType.Vector3
        summary: A Vector3 instance with the specified coordinates.
properties:
  - name: value
    summary: |
      The currently synchronized integer value of the IntValue. This is the value that all clients will be synchronized on and if changed, notified that the value is now different from the Value.Changed event.
    description:
    is_static: falseAll major blockers and bugs in Studio and Hub have been tackled
    tags:
      - ServerAndClient
    code_samples:
    type: Class.LuaBehaviour
methods:
math_operations:
