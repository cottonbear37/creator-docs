name: Vector3
type: datatypes
summary: Vector3 represents three-dimensional space as coordinates, physical quantities, or directions, containing three numerical components (x, y, and z). It is used in Unity for physics, animations, and transformations.
description:
code_samples:
inherits:
tags:
  - ServerAndClient
constructors:
  - name: new
    summary: Instantiates a new Vector3 object by specifying x, y, and z coordinates, representing a point in the Unity game world's 3D space.
    description:
    is_static: true
    tags:
      - ServerAndClient
    code_samples:
    parameters:
      - name: x
        type: number
        default:
        summary: Specifies the x-coordinate value.
      - name: y
        type: number
        default:
        summary: Specifies the y-coordinate value.
      - name: z
        type: number
        default:
        summary: Specifies the z-coordinate value.
    returns:
      - type: DataType.Vector3
        summary: A Vector3 instance with the specified coordinates.
properties:
  - name: normalized
    summary: Returns a version of this Vector3 with a magnitude of one, maintaining its direction. Useful for unit direction vectors.
    description:
    is_static: false
    code_samples:
    type: DataType.Vector3
  - name: magnitude
    summary: Provides the length of a Vector3, calculated as the Euclidean distance to (0,0,0), useful for distance calculations in 3D space.
    description:
    is_static: false
    code_samples:
    type: number
  - name: sqrMagnitude
    summary: Returns the square of the magnitude, an alternative for performance-sensitive calculations where exact distance is not necessary.
    description:
    is_static: false
    code_samples:
    type: number
  - name: x
    summary: Represents the x-coordinate of the Vector3, allowing direct manipulation or reading of its x-component.
    description:
    is_static: false
    tags:
      - ServerAndClient
    code_samples:
    type: number
  - name: y
    summary: Corresponds to the y-coordinate of the Vector3, for manipulating or reading the y-component.
    description:
    is_static: false
    tags:
      - ServerAndClient
    code_samples:
    type: number
  - name: z
    summary: Represents the z-coordinate of the Vector3, used for direct manipulation or reading of the z-component.
    description:
    is_static: false
    tags:
      - ServerAndClient
    code_samples:
    type: number
  - name: zero
    summary: Generates a Vector3 with zero values for all coordinates, representing the origin in 3D space or indicating no motion or rotation.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: one
    summary: Generates a Vector3 object with all components set to 1, useful for pointing diagonally in 3D space.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: forward
    summary: Returns a Vector3 pointing towards the positive Z-axis, useful for designating a forward direction.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: back
    summary: Provides a Vector3 pointing towards the negative Z-axis, often used to designate a backward direction.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: up
    summary: Offers a Vector3 pointing upwards along the positive Y-axis, handy for upward movements or orientations.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: down
    summary: Represents a Vector3 pointing downwards along the negative Y-axis, typically used for downward directions.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: left
    summary: Returns a Vector3 pointing in the negative X-axis direction, used to signify left direction in 3D space.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: right
    summary: Provides a Vector3 pointing towards the positive X-axis, recognized as the right direction in 3D space.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: positiveInfinity
    summary: Yields a Vector3 with all components set to positive infinity, useful for representing very large values.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: negativeInfinity
    summary: Generates a Vector3 with all components set to negative infinity, representing the smallest possible values in 3D space.
    description:
    is_static: true
    code_samples:
    type: DataType.Vector3
  - name: kEpsilon
    summary: Provides a very small positive number, used for comparisons to determine if Vector3 components are approximately zero, considering floating-point inaccuracies.
    description:
    is_static: true
    code_samples:
  - name: kEpsilonNormalSqrt
    summary: A small positive number used in square root calculations, representing a negligible threshold value for comparing Vector3 magnitudes.
    description:
    is_static: true
    code_samples:
    type: number
methods:
  - name: Set
    summary: Changes the x, y, and z values of an existing Vector3 object, useful for simultaneous updates to all three components.
    description:
    is_static: false
    code_samples:
    parameters:
      - name: newX
        type: number
        default:
        summary: The new value for the x-coordinate.
      - name: newY
        type: number
        default:
        summary: The new value for the y-coordinate.
      - name: newZ
        type: number
        default:
        summary: The new value for the z-coordinate.
    returns:
      - type: void
        summary:
  - name: Scale
    summary: Multiplies each component of the Vector3 by the corresponding components of another Vector3, used to alter the scale without changing its direction.
    description:
    is_static: false
    code_samples:
    parameters:
      - name: scale
        type: DataType.Vector3
        default:
        summary: A Vector3 by which the instance vector is scaled.
    returns:
      - type: void
        summary:
  - name: Normalize
    summary: Adjusts the Vector3 to a length of one while maintaining its direction, useful for when only the direction is of interest.
    description:
    is_static: false
    code_samples:
    parameters:
    returns:
      - type: void
        summary:
  - name: Slerp
    summary: Creates a smooth transition between two Vector3 points on a sphere's surface, ideal for smooth transitions in rotations or positions.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector3
        default:
        summary: The starting Vector3 point.
      - name: b
        type: DataType.Vector3
        default:
        summary: The ending Vector3 point.
      - name: t
        type: number
        default:
        summary: The interpolation factor between 0 and 1.
    returns:
      - type: DataType.Vector3
        summary: A Vector3 point along the shortest path between 'a' and 'b'.
  - name: SlerpUnclamped
    summary: Similar to 'Slerp' but allows the 't' value to exceed the 0 to 1 range, enabling extrapolation beyond the original points.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector3
        default:
        summary: The starting Vector3 point.
      - name: b
        type: DataType.Vector3
        default:
        summary: The ending Vector3 point.
      - name: t
        type: number
        default:
        summary: An extrapolation factor beyond 0 and 1.
    returns:
      - type: DataType.Vector3
        summary: A new Vector3 point potentially extrapolated beyond 'b'.
  - name: RotateTowards
    summary: Gradually rotates a Vector3 'current' to align with a 'target' Vector3, with specified maximum rotation and magnitude change limits.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: current
        type: DataType.Vector3
        default:
        summary: The current Vector3 from which rotation starts.
      - name: target
        type: DataType.Vector3
        default:
        summary: The target Vector3 towards which rotation is aimed.
      - name: maxRadiansDelta
        type: number
        default:
        summary: Maximum rotation allowed in radians.
      - name: maxMagnitudeDelta
        type: number
        default:
        summary: Maximum change in magnitude allowed.
    returns:
      - type: DataType.Vector3
        summary: The Vector3 after rotating towards the target.
  - name: Lerp
    summary: Performs linear interpolation between two Vector3s, transitioning from 'a' to 'b' based on the 't' ratio.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector3
        default:
        summary: The starting Vector3 point.
      - name: b
        type: DataType.Vector3
        default:
        summary: The ending Vector3 point.
      - name: t
        type: number
        default:
        summary: The interpolation factor, in the range 0 to 1.
    returns:
      - type: DataType.Vector3
        summary: A new Vector3 point interpolated between 'a' and 'b'.
  - name: LerpUnclamped
    summary: Similar to 'Lerp', this method performs linear interpolation between two points, but allows 't' to exceed the 0 to 1 range, enabling extrapolation.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector3
        default:
        summary: The starting Vector3 point.
      - name: b
        type: DataType.Vector3
        default:
        summary: The ending Vector3 point.
      - name: t
        type: number
        default:
        summary: The interpolation factor, not limited to between 0 and 1.
    returns:
      - type: DataType.Vector3
        summary: A new Vector3 point interpolated (or extrapolated) between 'a' and 'b'.
  - name: MoveTowards
    summary: Moves a Vector3 ('current') incrementally towards a target Vector3 ('target') at a specified 'maxDistanceDelta'.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: current
        type: DataType.Vector3
        default:
        summary: The current Vector3 to move.
      - name: target
        type: DataType.Vector3
        default:
        summary: The target Vector3 to move towards.
      - name: maxDistanceDelta
        type: number
        default:
        summary: The maximum distance the Vector3 can move in one call.
    returns:
      - type: DataType.Vector3
        summary: A Vector3 moved towards the target.
  - name: Scale
    summary: Creates a new Vector3 from the product of corresponding components of two given Vector3s, affecting the size without changing direction.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector3
        default:
        summary: The first Vector3 used for scaling.
      - name: b
        type: DataType.Vector3
        default:
        summary: The second Vector3 used for scaling.
    returns:
      - type: DataType.Vector3
        summary: The resulting Vector3 after scaling.
  - name: Cross
    summary: Calculates the cross product of two Vector3 instances, resulting in a Vector3 perpendicular to both, used for finding normals or rotation axes.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: lhs
        type: DataType.Vector3
        default:
        summary: The first Vector3 to cross.
      - name: rhs
        type: DataType.Vector3
        default:
        summary: The second Vector3 to cross.
    returns:
      - type: DataType.Vector3
        summary: The cross product of the two Vector3s.
  - name: Reflect
    summary: Reflects a Vector3 off a surface with a specified normal, useful for simulating reflections or ricochets.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: inDirection
        type: DataType.Vector3
        default:
        summary: The incoming Vector3 to reflect.
      - name: inNormal
        type: DataType.Vector3
        default:
        summary: The normal Vector3 off which to reflect.
    returns:
      - type: DataType.Vector3
        summary: The reflected Vector3.
  - name: Normalize
    summary: Normalizes a Vector3, returning a new Vector3 with the same direction but a magnitude of 1, useful for direction without magnitude concern.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: value
        type: DataType.Vector3
        default:
        summary: The Vector3 to normalize.
    returns:
      - type: DataType.Vector3
        summary: A normalized version of the input Vector3.
  - name: Dot
    summary: Calculates the Dot Product of two Vector3s, useful for determining directional alignment or the angle between vectors.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: lhs
        type: DataType.Vector3
        default:
        summary: The first Vector3 for the dot product.
      - name: rhs
        type: DataType.Vector3
        default:
        summary: The second Vector3 for the dot product.
    returns:
      - type: number
        summary: The dot product of the two Vector3s.
  - name: Project
    summary: Projects a Vector3 onto another, useful for finding the component of one vector in the direction of another.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: vector
        type: DataType.Vector3
        default:
        summary: The Vector3 being projected.
      - name: onNormal
        type: DataType.Vector3
        default:
        summary: The Vector3 on which the projection occurs.
    returns:
      - type: DataType.Vector3
        summary: The projection of the first Vector3 onto the second.
  - name: ProjectOnPlane
    summary: Projects a Vector3 onto a plane defined by a normal orthogonal Vector3, useful for aligning objects to surfaces.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: vector
        type: DataType.Vector3
        default:
        summary: The Vector3 being projected onto a plane.
      - name: planeNormal
        type: DataType.Vector3
        default:
        summary: The normal Vector3 of the plane onto which the projection occurs.
    returns:
      - type: DataType.Vector3
        summary: The Vector3 after being projected onto a plane.
  - name: Angle
    summary: Calculates the angle in degrees between two Vector3s, useful for determining the required rotation to align one Vector3 with another.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: from
        type: DataType.Vector3
        default:
        summary: The origin Vector3 for angle measurement.
      - name: to
        type: DataType.Vector3
        default:
        summary: The destination Vector3 for angle measurement.
    returns:
      - type: number
        summary: The angle in degrees between the two Vector3s.
  - name: SignedAngle
    summary: Calculates the angle between two Vector3s with a sign indicating rotation direction around a given axis.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: from
        type: DataType.Vector3
        default:
        summary: The Vector3 from where the angle measurement starts.
      - name: to
        type: DataType.Vector3
        default:
        summary: The Vector3 to which the angle measurement is made.
      - name: axis
        type: DataType.Vector3
        default:
        summary: The axis around which the rotation angle is measured.
    returns:
      - type: number
        summary: The signed angle in degrees between the two Vector3s.
  - name: Distance
    summary: Calculates the distance between two Vector3 points, typically used to determine how far apart two objects are in 3D space.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Vector3
        default:
        summary: The first Vector3 point.
      - name: b
        type: DataType.Vector3
        default:
        summary: The second Vector3 point.
    returns:
      - type: number
        summary: The distance between the two Vector3 points.
  - name: ClampMagnitude
    summary: Limits the magnitude of a Vector3 to a specified maximum, useful for constraining movement or other vector magnitudes.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: vector
        type: DataType.Vector3
        default:
        summary: The Vector3 to clamp.
      - name: maxLength
        type: number
        default:
        summary: The maximum length to which the Vector3's magnitude is clamped.
    returns:
      - type: DataType.Vector3
        summary: The Vector3 with its magnitude clamped.
  - name: Magnitude
    summary: Returns the magnitude (length) of a Vector3, useful for distance calculations from the origin.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: vector
        type: DataType.Vector3
        default:
        summary: The Vector3 of which to calculate the magnitude.
    returns:
      - type: number
        summary: The magnitude of the Vector3.
  - name: SqrMagnitude
    summary: Calculates the square of the magnitude of a Vector3, often used for performance reasons in relative length comparisons.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: vector
        type: DataType.Vector3
        default:
        summary: The Vector3 of which to calculate the square of the magnitude.
    returns:
      - type: number
        summary: The square of the magnitude of the Vector3.
  - name: Min
    summary: Returns a Vector3 composed of the smallest x, y, and z components from two given Vector3s, useful for bounding calculations.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: lhs
        type: DataType.Vector3
        default:
        summary: The first Vector3 for comparison.
      - name: rhs
        type: DataType.Vector3
        default:
        summary: The second Vector3 for comparison.
    returns:
      - type: DataType.Vector3
        summary
        : A Vector3 made up of the smallest components from the two input Vector3s.
  - name: Max
    summary: Produces a Vector3 from the largest x, y, and z components of two given Vector3s, useful for defining bounds or extents.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: lhs
        type: DataType.Vector3
        default:
        summary: The first of two Vector3s to compare.
      - name: rhs
        type: DataType.Vector3
        default:
        summary: The second of two Vector3s to compare.
    returns:
      - type: DataType.Vector3
        summary: A Vector3 composed of the largest components of the two compared Vector3s.
math_operations:
  - operation: "=="
    summary: Checks for approximate equality between two Vector3s, considering the precision limitations of floating-point representation.
    description:
    type_a: Vector3
    type_b: Vector3
    return_type: boolean
    code_samples:
  - operation: "/"
    summary: Scales down a Vector3 by dividing its components by a given scalar value, effectively reducing its magnitude.
    description:
    type_a: Vector3
    type_b: number
    return_type: Vector3
    code_samples:
  - operation: "*"
    summary: Scales a Vector3 by multiplying its components by a scalar value, changing its magnitude without altering direction.
    description:
    type_a: number
    type_b: Vector3
    return_type: Vector3
    code_samples:
  - operation: "-"
    summary: Produces a new Vector3 as the mirror image of the original across the origin, negating each of its components.
    description:
    type_a: Vector3
    type_b:
    return_type: Vector3
    code_samples:
  - operation: "-"
    summary: Results in a Vector3 from subtracting each component of the second Vector3 from the corresponding component of the first.
    description:
    type_a: Vector3
    type_b: Vector3
    return_type: Vector3
    code_samples:
  - operation: "+"
    summary: Yields a new Vector3 whose components are the sums of the corresponding components of two given Vector3s, analogous to vector addition.
    description:
    type_a: Vector3
    type_b: Vector3
    return_type: Vector3
    code_samples:



