name: Quaternion
type: datatypes
summary: |
  A Quaternion represents rotation and direction in 3D space, consisting of x, y, z, and w components. They are crucial for 3D movement and rotation, offering advantages such as avoiding gimbal lock.
description:
code_samples:
inherits:
constructors:
  - name: new
    summary: Creates a new Quaternion with specified x, y, z, and w components.
    description:
    is_static: false
    code_samples:
    parameters:
      - name: x
        type: number
        default:
        summary: The x component.
      - name: y
        type: number
        default:
        summary: The y component.
      - name: z
        type: number
        default:
        summary: The z component.
      - name: w
        type: number
        default:
        summary: The w component.
    returns:
      - type: DataType.Quaternion
        summary: A new Quaternion with given components.
properties:
  - name: eulerAngles
    summary: Returns the rotation of a Quaternion in Euler angles representation.
    description:
    is_static: false
    code_samples:
    type: DataType.Vector3
  - name: normalized
    summary: Returns a normalized copy of the Quaternion.
    description:
    is_static: false
    code_samples:
    type: DataType.Quaternion
  - name: x
    summary: Represents the x component of the Quaternion.
    description:
    is_static: false
    code_samples:
    type: number
  - name: y
    summary: Represents the y component of the Quaternion.
    description:
    is_static: false
    code_samples:
    type: number
  - name: z
    summary: Represents the z component of the Quaternion.
    description:
    is_static: false
    code_samples:
    type: number
  - name: w
    summary: Represents the w (scalar) component of the Quaternion.
    description:
    is_static: false
    code_samples:
    type: number
  - name: identity
    summary: Represents a Quaternion for no rotation.
    description:
    is_static: true
    code_samples:
    type: DataType.Quaternion
  - name: kEpsilon
    summary: Represents a small number greater than zero for comparison.
    description:
    is_static: true
    code_samples:
    type: number
methods:
  - name: Set
    summary: Assigns new values to the Quaternion's components.
    description:
    is_static: false
    code_samples:
    parameters:
      - name: newX
        type: number
        default:
        summary: The new x component.
      - name: newY
        type: number
        default:
        summary: The new y component.
      - name: newZ
        type: number
        default:
        summary: The new z component.
      - name: newW
        type: number
        default:
        summary: The new w component.
    returns:
      - type: void
  - name: SetLookRotation
    summary: Aligns the Quaternion's z-axis towards a target direction.
    description:
    is_static: false
    code_samples:
    parameters:
      - name: view
        type: DataType.Vector3
        default:
        summary: The target direction vector.
    returns:
      - type: void
  - name: SetFromToRotation
    summary: Sets the Quaternion to rotate from one direction to another.
    description:
    is_static: false
    code_samples:
    parameters:
      - name: fromDirection
        type: DataType.Vector3
        default:
        summary: The vector to rotate from.
      - name: toDirection
        type: DataType.Vector3
        default:
        summary: The vector to rotate to.
    returns:
      - type: void
  - name: Normalize
    summary: Modifies the quaternion to a unit length version of itself.
    description:
    is_static: false
    code_samples:
    parameters:
    returns:
      - type: void
  - name: FromToRotation
    summary: Creates a Quaternion that rotates from one direction to another.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: fromDirection
        type: DataType.Vector3
        default:
        summary: The vector to rotate from.
      - name: toDirection
        type: DataType.Vector3
        default:
        summary: The vector to rotate to.
    returns:
      - type: DataType.Quaternion
        summary: A rotation from fromDirection to toDirection.
  - name: Inverse
    summary: Returns the inverse of the Quaternion.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: rotation
        type: DataType.Quaternion
        default:
        summary: The rotation to inverse.
    returns:
      - type: DataType.Quaternion
        summary: The inverse rotation.
  - name: Slerp
    summary: Gradually changes a Quaternion from one rotation to another.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The starting rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The end rotation.
      - name: t
        type: number
        default:
        summary: The amount to interpolate.
    returns:
      - type: DataType.Quaternion
        summary: An interpolated quaternion rotation.
  - name: SlerpUnclamped
    summary: Interpolates a Quaternion over an arbitrary range.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The starting rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The end rotation.
      - name: t
        type: number
        default:
        summary: The unclamped interpolation amount.
    returns:
      - type: DataType.Quaternion
        summary: An interpolated quaternion rotation.
  - name: Lerp
    summary: Linearly interpolates between two quaternions.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The starting rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The end rotation.
      - name: t
        type: number
        default:
        summary: The amount to interpolate.
    returns:
      - type: DataType.Quaternion
        summary: An interpolated quaternion rotation.
  - name: LerpUnclamped
    summary: Interpolates a Quaternion over an arbitrary range.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The starting rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The end rotation.
      - name: t
        type: number
        default:
       
summary: The unclamped interpolation amount.
    returns:
      - type: DataType.Quaternion
        summary: An interpolated quaternion rotation.
  - name: AngleAxis
    summary: Creates a Quaternion rotation around an axis by a specified angle.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: angle
        type: number
        default:
        summary: The angle of rotation.
      - name: axis
        type: DataType.Vector3
        default:
        summary: The rotation axis.
    returns:
      - type: DataType.Quaternion
        summary: A Quaternion around the specified axis with the given angle.
  - name: LookRotation
    summary: Provides a quaternion that makes an object face towards a specified direction.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: forward
        type: DataType.Vector3
        default:
        summary: The direction to be faced.
      - name: upwards
        type: DataType.Vector3
        default:
        summary: The direction to be used as 'upwards'.
    returns:
      - type: DataType.Quaternion
        summary: A Quaternion that aligns an object's forward direction towards the specified direction.
  - name: Dot
    summary: Calculates the dot product of two quaternions.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The first quaternion.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The second quaternion.
    returns:
      - type: number
        summary: The dot product of the two quaternions.
  - name: Angle
    summary: Returns the angle in degrees between two rotations.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: a
        type: DataType.Quaternion
        default:
        summary: The first rotation.
      - name: b
        type: DataType.Quaternion
        default:
        summary: The second rotation.
    returns:
      - type: number
        summary: The angle in degrees between the two rotations.
  - name: Euler
    summary: Creates a Quaternion rotation from Euler angles.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: x
        type: number
        default:
        summary: The angle around the x-axis in degrees.
      - name: y
        type: number
        default:
        summary: The angle around the y-axis in degrees.
      - name: z
        type: number
        default:
        summary: The angle around the z-axis in degrees.
    returns:
      - type: DataType.Quaternion
        summary: A Quaternion from the Euler angles.
  - name: RotateTowards
    summary: Gradually changes a Quaternion towards a target rotation.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: from
        type: DataType.Quaternion
        default:
        summary: The current rotation.
      - name: to
        type: DataType.Quaternion
        default:
        summary: The target rotation.
      - name: maxDegreesDelta
        type: number
        default:
        summary: The maximum number of degrees to rotate by in each call.
    returns:
      - type: DataType.Quaternion
        summary: A Quaternion rotated towards the target.
  - name: Normalize
    summary: Modifies the quaternion to a unit length version of itself.
    description:
    is_static: true
    code_samples:
    parameters:
      - name: q
        type: DataType.Quaternion
        default:
        summary: The Quaternion to be normalized.
    returns:
      - type: DataType.Quaternion
        summary: The normalized version of the quaternion.
math_operations:
  - operation: "=="
    summary: Checks if two quaternions are equal.
    description:
    type_a: Quaternion
    type_b: Quaternion
    return_type: boolean
    code_samples:
  - operation: "*"
    summary: Multiplies a quaternion with a Vector3 or another Quaternion.
    description: Used to rotate vectors or combine rotations.
    type_a: Quaternion
    type_b: Vector3
    return_type: Vector3
    code_samples:
